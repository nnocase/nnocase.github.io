<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>层楼</title>
  
  <subtitle>少年不识愁滋味,爱上层楼.爱上层楼.</subtitle>
  <link href="http://icenglou.cn/atom.xml" rel="self"/>
  
  <link href="http://icenglou.cn/"/>
  <updated>2022-05-06T16:54:37.561Z</updated>
  <id>http://icenglou.cn/</id>
  
  <author>
    <name>nnocase</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac端口5000被ControlCe占用的问题</title>
    <link href="http://icenglou.cn/2022/04/27/Mac%E7%AB%AF%E5%8F%A35000%E8%A2%ABControlCe%E5%8D%A0%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://icenglou.cn/2022/04/27/Mac%E7%AB%AF%E5%8F%A35000%E8%A2%ABControlCe%E5%8D%A0%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-27T06:30:21.000Z</published>
    <updated>2022-05-06T16:54:37.561Z</updated>
    
    <content type="html"><![CDATA[<p>查看端口占用情况 <code>lsof -i:端口号</code></p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ lsof -i:5000</span><br><span class="line">COMMAND     PID USER   FD   TYPE            DEVICE SIZE/OFF NODE NAME</span><br><span class="line">ControlCe   491  xgf   23u  IPv4 0xa14657c0803f967      0t0  TCP *:commplex-main (LISTEN)</span><br><span class="line">ControlCe   491  xgf   24u  IPv6 0xa14657746fd3fcf      0t0  TCP *:commplex-main (LISTEN)</span><br></pre></td></tr></table></figure><p>显示进程ControlCe在占用5000端口，这是系统进程Control Center(隔空播放)，把它kill掉还是会自动启动起来。<br>占用的是 0.0.0.0:5000</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><span id="more"></span><p>在系统设置里关掉 “共享–隔空播放接收器” 就可以了<br><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1o9s7o214j20zm0jcq4n.jpg" alt="image-20220427143658826"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;查看端口占用情况 &lt;code&gt;lsof -i:端口号&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lsof -i:5000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMAND     PID USER   FD   TYPE            DEVICE SIZE/OFF NODE NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ControlCe   491  xgf   23u  IPv4 0xa14657c0803f967      0t0  TCP *:commplex-main (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ControlCe   491  xgf   24u  IPv6 0xa14657746fd3fcf      0t0  TCP *:commplex-main (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显示进程ControlCe在占用5000端口，这是系统进程Control Center(隔空播放)，把它kill掉还是会自动启动起来。&lt;br&gt;占用的是 0.0.0.0:5000&lt;/p&gt;
&lt;h5 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h5&gt;</summary>
    
    
    
    
    <category term="Mac" scheme="http://icenglou.cn/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>用Python给图片添加水印</title>
    <link href="http://icenglou.cn/2021/12/12/%E7%94%A8Python%E7%BB%99%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/"/>
    <id>http://icenglou.cn/2021/12/12/%E7%94%A8Python%E7%BB%99%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</id>
    <published>2021-12-12T15:21:53.000Z</published>
    <updated>2022-05-08T04:52:42.766Z</updated>
    
    <content type="html"><![CDATA[<p>直接看代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw,ImageFont, ImageEnhance</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;my_pic.jpeg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">w, h = im.size</span><br><span class="line"></span><br><span class="line">watermark = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, im.size) <span class="comment"># 水印</span></span><br><span class="line"></span><br><span class="line">draw = ImageDraw.Draw(watermark, <span class="string">&#x27;RGBA&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置文字大小</span></span><br><span class="line"></span><br><span class="line">font_size = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体</span></span><br><span class="line">font_file = <span class="string">&quot;simsun.ttc&quot;</span></span><br><span class="line"></span><br><span class="line">font = ImageFont.truetype(font_file,font_size )</span><br><span class="line"></span><br><span class="line">draw.text((<span class="number">10</span>, <span class="number">20</span>), <span class="string">&#x27;这是水印内容&#x27;</span>, fill=<span class="string">&quot;#ff0000&quot;</span>, font=font)</span><br><span class="line"><span class="comment"># 第一个参数：表示文字起始坐标</span></span><br><span class="line"><span class="comment"># 第二个参数：表示写入内容</span></span><br><span class="line"><span class="comment"># fill：表示颜色</span></span><br><span class="line"><span class="comment"># font：字体</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 旋转 45 度</span></span><br><span class="line"><span class="comment"># watermark = watermark.rotate(45, Image.BICUBIC)</span></span><br><span class="line">watermark = watermark.rotate(<span class="number">0</span>, Image.BICUBIC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 透明的</span></span><br><span class="line">alpha = watermark.split()[<span class="number">3</span>]</span><br><span class="line">alpha = ImageEnhance.Brightness(alpha).enhance(<span class="number">0.7</span>)</span><br><span class="line">watermark.putalpha(alpha)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合成新的图片</span></span><br><span class="line">n = Image.composite(watermark, im, watermark)</span><br><span class="line">n.save(<span class="string">&#x27;new_watermark.jpeg&#x27;</span>, <span class="string">&#x27;JPEG&#x27;</span>)</span><br></pre></td></tr></table></figure><p>效果：</p><span id="more"></span> <p><img src="http://test-img.icenglou.cn/158926954904996767457.jpeg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;直接看代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; PIL &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Image,ImageDraw,ImageFont, ImageEnhance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;im = Image.&lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;my_pic.jpeg&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w, h = im.size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;watermark = Image.new(&lt;span class=&quot;string&quot;&gt;&amp;#x27;RGBA&amp;#x27;&lt;/span&gt;, im.size) &lt;span class=&quot;comment&quot;&gt;# 水印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;draw = ImageDraw.Draw(watermark, &lt;span class=&quot;string&quot;&gt;&amp;#x27;RGBA&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置文字大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;font_size = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设置字体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;font_file = &lt;span class=&quot;string&quot;&gt;&amp;quot;simsun.ttc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;font = ImageFont.truetype(font_file,font_size )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;draw.text((&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&amp;#x27;这是水印内容&amp;#x27;&lt;/span&gt;, fill=&lt;span class=&quot;string&quot;&gt;&amp;quot;#ff0000&amp;quot;&lt;/span&gt;, font=font)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 第一个参数：表示文字起始坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 第二个参数：表示写入内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# fill：表示颜色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# font：字体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 旋转 45 度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# watermark = watermark.rotate(45, Image.BICUBIC)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;watermark = watermark.rotate(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, Image.BICUBIC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 透明的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alpha = watermark.split()[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alpha = ImageEnhance.Brightness(alpha).enhance(&lt;span class=&quot;number&quot;&gt;0.7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;watermark.putalpha(alpha)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 合成新的图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n = Image.composite(watermark, im, watermark)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n.save(&lt;span class=&quot;string&quot;&gt;&amp;#x27;new_watermark.jpeg&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;JPEG&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;效果：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://icenglou.cn/tags/python/"/>
    
    <category term="Pillow" scheme="http://icenglou.cn/tags/pillow/"/>
    
  </entry>
  
  <entry>
    <title>生成器执行时间差异</title>
    <link href="http://icenglou.cn/2021/05/08/%E7%94%9F%E6%88%90%E5%99%A8%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E5%B7%AE%E5%BC%82/"/>
    <id>http://icenglou.cn/2021/05/08/%E7%94%9F%E6%88%90%E5%99%A8%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E5%B7%AE%E5%BC%82/</id>
    <published>2021-05-08T04:49:44.000Z</published>
    <updated>2022-05-10T15:38:10.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="示例1-生成器-有if"><a href="#示例1-生成器-有if" class="headerlink" title="示例1 生成器(有if)"></a>示例1 生成器(有if)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line">g = (i <span class="keyword">for</span> i <span class="keyword">in</span> array <span class="keyword">if</span> array.count(i) &gt; <span class="number">0</span> )</span><br><span class="line">array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">list</span>(g)</span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果只看前两行，list(g)肯定输出为 [1, 3, 9]，因为三个元素都满足条件<br>但为什么给array重新赋值后，list(g)输出的是[3]呢？<br>因为：在生成器表达式中，in子句在声明时执行，而if字句在运行时执行由于第三行在运行前，<br>    array已经被重新赋值为[2, 3, 10], 运行时if array.count的array的值已经是[2, 3, 10]<br>所以：(i for i in [1, 3, 9] if [2, 3, 10].count(i) &gt; 0) 最后只有3符合, list(g) == [3]</p><h2 id="示例2-列表生成式-无if"><a href="#示例2-列表生成式-无if" class="headerlink" title="示例2 列表生成式(无if)"></a>示例2 列表生成式(无if)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line">g = [i <span class="keyword">for</span> i <span class="keyword">in</span> array]</span><br><span class="line">array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br><span class="line">g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="示例3-列表生成式-有if"><a href="#示例3-列表生成式-有if" class="headerlink" title="示例3 列表生成式(有if)"></a>示例3 列表生成式(有if)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line">g = [i <span class="keyword">for</span> i <span class="keyword">in</span> array <span class="keyword">if</span> array.count(i) &gt; <span class="number">0</span>]</span><br><span class="line">array = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>在列表生成式里没有体现执行时间差异</p><h2 id="示例4-切片"><a href="#示例4-切片" class="headerlink" title="示例4 切片"></a>示例4 切片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line">g = (i <span class="keyword">for</span> i <span class="keyword">in</span> array)</span><br><span class="line">array[:] = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">list</span>(g)</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>对array的切片赋值也会有执行时间差异</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;示例1-生成器-有if&quot;&gt;&lt;a href=&quot;#示例1-生成器-有if&quot; class=&quot;headerlink&quot; title=&quot;示例1 生成器(有if)&quot;&gt;&lt;/a&gt;示例1 生成器(有if)&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;t</summary>
      
    
    
    
    
    <category term="Python" scheme="http://icenglou.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>配置CDN加速</title>
    <link href="http://icenglou.cn/2019/12/23/%E9%85%8D%E7%BD%AECDN%E5%8A%A0%E9%80%9F/"/>
    <id>http://icenglou.cn/2019/12/23/%E9%85%8D%E7%BD%AECDN%E5%8A%A0%E9%80%9F/</id>
    <published>2019-12-23T13:00:59.000Z</published>
    <updated>2022-05-08T04:52:16.497Z</updated>
    
    <content type="html"><![CDATA[<p>发现访问博客时图片渲染过慢，于是打算给博客配置CDN加速。目前阿里云有付费的CDN方案，怎奈实在囊中羞涩，只好寻求免费的CDN</p><blockquote><p>CDN （Content Delivery Network or Content Ddistribute Network）内容分发网络。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。类似分布各地的物流仓储网络，CDN网络可以将源站的内容缓存到分布全球的CDN节点，根据用户的访问IP，就近连接CDN，提高网站响应速度。<br>一般的网站只有一台或一组服务器，用户访问站点时请求需要跨越复杂的路由链路，抵达网站服务器，经过tcp三次握手建立连接，服务器才会将站点数据传输给用户。</p></blockquote><span id="more"></span><p>使用CDN加速后，CDN在全球的分布式节点将会拷贝一份源站的数据（图片、js、html等等），称为缓存，用户在访问源站域名时会被DNS解析到最近的CDN服务器，并且访问缓存资源。<br>普通的网站访问流程和使用CDN的网站访问如下图，其中蓝色链路是无CDN的链路</p><p><img src="http://test-img.icenglou.cn/158890297269543004475.png"></p><blockquote><p>作者：MachinePlay<br>链接：<a href="https://www.jianshu.com/p/18e74c088133" title="https://www.jianshu.com/p/18e74c088133">https://www.jianshu.com/p/18e74c088133</a><br>来源：简书</p></blockquote><p>搜了下，最后选择了<a href="https://www.cloudflare.com/zh-cn/plans/" title="CloudFlare">CloudFlare</a><br>1、注册账号<br>2、添加站点，输入自己的域名（只需跟域名——一级域名）<br>3、选择免费的套餐，确认，跳过<br>4、这里给到两个DNS解析服务器，需要到域名注册商修改DNS解析服务器（这里我用的阿里云），修改会收到短信验证<br>5、修改完后，点击完成，稍等一会收到邮件代表成功了</p><p>这是ping一下自己的网站就能看到访问的IP变了</p><p>没CDN前：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> ping www.icenglou.cn</span></span><br><span class="line">PING www.icenglou.cn (47.106.85.122): 56 data bytes</span><br><span class="line">64 bytes from 47.106.**.*22: icmp_seq=0 ttl=52 time=8.926 ms</span><br><span class="line">64 bytes from 47.106.**.*22: icmp_seq=1 ttl=52 time=8.836 ms</span><br><span class="line">64 bytes from 47.106.**.*22: icmp_seq=2 ttl=52 time=9.943 ms</span><br><span class="line">64 bytes from 47.106.**.*22: icmp_seq=3 ttl=52 time=16.017 ms</span><br></pre></td></tr></table></figure><p>CDN加速后：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> ping www.icenglou.cn</span></span><br><span class="line">PING www.icenglou.cn (47.106.85.122): 56 data bytes</span><br><span class="line">64 bytes from 104.28.**.*6: icmp_seq=0 ttl=52 time=8.926 ms</span><br><span class="line">64 bytes from 47.106.**.*22: icmp_seq=1 ttl=52 time=8.836 ms</span><br><span class="line">64 bytes from 104.28.**.*6: icmp_seq=2 ttl=52 time=9.943 ms</span><br><span class="line">64 bytes from 47.106.**.*22: icmp_seq=3 ttl=52 time=16.017 ms</span><br></pre></td></tr></table></figure><p>访问一下博客，确实感觉快了点（不知道是不是心理作用，免费套餐的节点还是比较少的）</p><p><a href="https://zhuanlan.zhihu.com/p/105801731" title="转载自：知乎每日VPS老谢">转载自：知乎每日VPS老谢</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;发现访问博客时图片渲染过慢，于是打算给博客配置CDN加速。目前阿里云有付费的CDN方案，怎奈实在囊中羞涩，只好寻求免费的CDN&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CDN （Content Delivery Network or Content Ddistribute Network）内容分发网络。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。类似分布各地的物流仓储网络，CDN网络可以将源站的内容缓存到分布全球的CDN节点，根据用户的访问IP，就近连接CDN，提高网站响应速度。&lt;br&gt;一般的网站只有一台或一组服务器，用户访问站点时请求需要跨越复杂的路由链路，抵达网站服务器，经过tcp三次握手建立连接，服务器才会将站点数据传输给用户。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="CDN" scheme="http://icenglou.cn/tags/cdn/"/>
    
  </entry>
  
  <entry>
    <title>事务的理解</title>
    <link href="http://icenglou.cn/2019/10/23/%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://icenglou.cn/2019/10/23/%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2019-10-23T13:00:59.000Z</published>
    <updated>2022-05-08T04:51:54.177Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事务-基于PostgreSQL"><a href="#事务-基于PostgreSQL" class="headerlink" title="事务(基于PostgreSQL)"></a>事务(基于PostgreSQL)</h4><p>事务最重要的一点就是<strong>将多个步骤捆绑成一个单一的、要么全完成要么全不完成</strong>的操作</p><p>例如，考虑一个保存着多个客户账户余额和支行总存款额的银行数据库。假设我们希望记录一笔从Alice的账户到Bob的账户的额度为100.00美元的转账。在最大程度地简化后，涉及到的SQL命令是：</p><span id="more"></span> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100.00</span></span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span>;</span><br><span class="line">UPDATE branches <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100.00</span></span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> (<span class="keyword">SELECT</span> branch_name <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">UPDATE accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100.00</span></span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">UPDATE branches <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100.00</span></span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> (<span class="keyword">SELECT</span> branch_name <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Bob&#x27;</span>);</span><br></pre></td></tr></table></figure><p>显而易见，为了完成这样一个简单的操作，数据库涉及到了多个独立的更新。但是独立的更新不能保障数据的一致性，不能发生因为系统错误导致Bob收到100美元而Alice并未被扣款的情况。这个时候就需要将这些更新组织成一个事务了，因为事务具有原子性和一致性：</p><h5 id="1、原子性-——Atomicity"><a href="#1、原子性-——Atomicity" class="headerlink" title="1、原子性 ——Atomicity"></a>1、原子性 ——Atomicity</h5><p><strong>事务里的所有操作要么一起成功，要么一起失败回滚。</strong></p><h5 id="2、一致性-——Consistency"><a href="#2、一致性-——Consistency" class="headerlink" title="2、一致性 ——Consistency"></a>2、一致性 ——Consistency</h5><p><strong>数据在事务执行前后，从一个一致性状态转变至另一个一致性状态。</strong></p><p>同时，一个事务被数据库系统完成并认可，我们也希望永久地记录下来且即便其后发生崩溃也不会被丢失。例如，如果我们正在记录Bob的一次现金提款，我们当然不希望他刚走出银行大门，对他账户的扣款就消失。一个事务型数据库保证一个事务在被报告为完成之前它所做的所有更新都被记录在持久存储（即磁盘）。这就是事务的另一个特性——持久性</p><h5 id="3、持久性-——Durability"><a href="#3、持久性-——Durability" class="headerlink" title="3、持久性 ——Durability"></a>3、持久性 ——Durability</h5><p><strong>事务一旦提交，对数据库造成的影响是永久性的，即便数据库遭遇断网断电等故障，也不会丢失提交的更新。</strong></p><p>但是，现在还有一个问题，现实中并不是只有一个Alice转账给Bob的情况，当多个事务并发生，如何保证数据的一致性？这里就要讲到事务的第四大特性——隔离性：</p><h5 id="4、隔离性——Isolation"><a href="#4、隔离性——Isolation" class="headerlink" title="4、隔离性——Isolation"></a>4、隔离性——Isolation</h5><p><strong>当多个事务并发访问数据库时，各个事务之间应该是隔离的，独立的。一个事务不应该影响其他事务的效果。事务查看数据更新时，数据要么是其他事务执行前的状态，要么是其他事务执行后的状态，不能看到中间的状态。</strong></p><p><strong>当多个事务并发运行时，每一个都不能看到其他事务未完成的修改。</strong></p><p><strong>完全的隔离性只有事务串行执行，那样则不存在并发，效率很低，因此在开发中应结合业务需求设置事务的隔离级别，隔离级别越高，效率越低，反之，效率越高。四个隔离级别稍后介绍。</strong></p><p>例如，如果一个事务正忙着总计所有支行的余额，它不会只包括Alice的支行的扣款而不包括Bob的支行的存款，或者反之。所以事务的全做或全不做并不只体现在它们对数据库的持久影响，也体现在它们发生时的可见性。一个事务所做的更新在它完成之前对于其他事务是不可见的，而之后所有的更新将同时变得可见。</p><p>在PostgreSQL中，开启一个事务需要将SQL命令用BEGIN和COMMIT命令包围起来。因此我们的银行事务看起来会是这样：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">UPDATE accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100.00</span></span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span>;</span><br><span class="line"><span class="comment">-- etc etc</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>如果，在事务执行中我们并不想提交（或许是我们注意到Alice的余额不足），我们可以发出ROLLBACK命令而不是COMMIT命令，这样所有目前的更新将会被取消。</p><p>PostgreSQL实际上将每一个SQL语句都作为一个事务来执行。如果我们没有发出BEGIN命令，则每个独立的语句都会被加上一个隐式的BEGIN以及（如果成功）COMMIT来包围它。一组被BEGIN和COMMIT包围的语句也被称为一个事务块。</p><blockquote><p>注意<br>某些客户端库会自动发出BEGIN和COMMIT命令，因此我们可能会在不被告知的情况下得到事务块的效果。</p></blockquote><p>也可以利用保存点来以更细的粒度来控制一个事务中的语句。保存点允许我们有选择性地放弃事务的一部分而提交剩下的部分。在使用SAVEPOINT定义一个保存点后，我们可以在必要时利用ROLLBACK TO回滚到该保存点。该事务中位于保存点和回滚点之间的数据库修改都会被放弃，但是早于该保存点的修改则会被保存。</p><p>在回滚到保存点之后，它的定义依然存在，因此我们可以多次回滚到它。反过来，如果确定不再需要回滚到特定的保存点，它可以被释放以便系统释放一些资源。记住不管是释放保存点还是回滚到保存点都会释放定义在该保存点之后的所有其他保存点。</p><p>所有这些都发生在一个事务块内，因此这些对于其他数据库会话都不可见。当提交整个事务块时，被提交的动作将作为一个单元变得对其他会话可见，而被回滚的动作则永远不会变得可见。</p><p>记住那个银行数据库，假设我们从Alice的账户扣款100美元，然后存款到Bob的账户，结果直到最后才发现我们应该存到Wally的账户。我们可以通过使用保存点来做这件事：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line">UPDATE accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100.00</span></span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> my_savepoint;</span><br><span class="line">UPDATE accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100.00</span></span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line"><span class="comment">-- oops ... forget that and use Wally&#x27;s account</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> my_savepoint;</span><br><span class="line">UPDATE accounts <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100.00</span></span><br><span class="line">    <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Wally&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>当然，这个例子是被过度简化的，但是在一个事务块中使用保存点存在很多种控制可能性。此外，ROLLBACK TO是唯一的途径来重新控制一个由于错误被系统置为中断状态的事务块，而不是完全回滚它并重新启动。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;事务-基于PostgreSQL&quot;&gt;&lt;a href=&quot;#事务-基于PostgreSQL&quot; class=&quot;headerlink&quot; title=&quot;事务(基于PostgreSQL)&quot;&gt;&lt;/a&gt;事务(基于PostgreSQL)&lt;/h4&gt;&lt;p&gt;事务最重要的一点就是&lt;strong&gt;将多个步骤捆绑成一个单一的、要么全完成要么全不完成&lt;/strong&gt;的操作&lt;/p&gt;
&lt;p&gt;例如，考虑一个保存着多个客户账户余额和支行总存款额的银行数据库。假设我们希望记录一笔从Alice的账户到Bob的账户的额度为100.00美元的转账。在最大程度地简化后，涉及到的SQL命令是：&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据库" scheme="http://icenglou.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HTML页面转换成PDF</title>
    <link href="http://icenglou.cn/2019/10/15/HTML%E9%A1%B5%E9%9D%A2%E8%BD%AC%E5%8C%96%E6%88%90PDF/"/>
    <id>http://icenglou.cn/2019/10/15/HTML%E9%A1%B5%E9%9D%A2%E8%BD%AC%E5%8C%96%E6%88%90PDF/</id>
    <published>2019-10-15T06:57:21.000Z</published>
    <updated>2022-05-06T16:54:48.978Z</updated>
    
    <content type="html"><![CDATA[<h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><p>用到的库  参考：<a href="http://kaito-kidd.com/2015/03/12/python-html2pdf/">http://kaito-kidd.com/2015/03/12/python-html2pdf/</a><br><code>import pdfkit</code><br>用法:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pdfkit.url(<span class="string">&#x27;http://www.baidu.com&#x27;</span>, <span class="string">&#x27;path/out.pdf&#x27;</span>)  <span class="comment"># 读取url转PDF</span></span><br><span class="line"></span><br><span class="line">pdfkit.html(<span class="string">&#x27;path/test.html&#x27;</span>, <span class="string">&#x27;path/out.pdf&#x27;</span>)   <span class="comment"># html页面转PDF</span></span><br><span class="line"></span><br><span class="line">pdfkit.string(<span class="string">&#x27;hello!&#x27;</span>, <span class="string">&#x27;path/out.pdf&#x27;</span>) .  <span class="comment"># 字符串转PDF</span></span><br></pre></td></tr></table></figure><p>实例代码:</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = render_template(<span class="string">&#x27;path.html&#x27;</span>, items=items)</span><br><span class="line"><span class="comment"># 页面用到的css文件</span></span><br><span class="line">css = [current_app.root_path + url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;path.css&#x27;</span>),</span><br><span class="line">       current_app.root_path + url_for(<span class="string">&#x27;static&#x27;</span>, filename=<span class="string">&#x27;path.js&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些API</span></span><br><span class="line"><span class="comment"># 导出的PDF页面参数的设置</span></span><br><span class="line">options = &#123;</span><br><span class="line">    <span class="string">&#x27;page-size&#x27;</span>: <span class="string">&#x27;Letter&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;margin-top&#x27;</span>: <span class="string">&#x27;0.25in&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;margin-right&#x27;</span>: <span class="string">&#x27;0.2in&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;margin-bottom&#x27;</span>: <span class="string">&#x27;0.25in&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;margin-left&#x27;</span>: <span class="string">&#x27;0.2in&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;path/filename.pdf&#x27;</span></span><br><span class="line">pdfkit.from_string(html, filename, css=css, options=options)</span><br></pre></td></tr></table></figure><p>这个方法比较缺点是，页面渲染很难调，页面样式不兼容，中文乱码等问题。<a href="https://izsk.me/2017/09/13/%E7%94%A8python%E5%B0%86html%E9%A1%B5%E9%9D%A2%E8%BD%AC%E6%8D%A2%E6%88%90pdf%E6%96%87%E4%BB%B6,%E9%A1%BA%E4%BE%BF%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/">解决中文乱码</a><br>不建议在生产环境中使用，有坑。<a href="https://www.v2ex.com/t/523744">生产环境X server问题</a></p><h5 id="方法二、"><a href="#方法二、" class="headerlink" title="方法二、"></a>方法二、</h5><p>xhtml2pdf<br><a href="https://xhtml2pdf.readthedocs.io/en/latest/">官方文档</a></p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xhtml2pdf <span class="keyword">import</span> pisa</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your data</span></span><br><span class="line">sourceHtml = <span class="string">&quot;&lt;html&gt;&lt;body&gt;&lt;p&gt;To PDF or not to PDF&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span></span><br><span class="line">outputFilename = <span class="string">&quot;test.pdf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Utility function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertHtmlToPdf</span>(<span class="params">sourceHtml, outputFilename</span>):</span></span><br><span class="line">    <span class="comment"># open output file for writing (truncated binary)</span></span><br><span class="line">    resultFile = <span class="built_in">open</span>(outputFilename, <span class="string">&quot;w+b&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># convert HTML to PDF</span></span><br><span class="line">    pisaStatus = pisa.CreatePDF(</span><br><span class="line">            sourceHtml,                <span class="comment"># the HTML to convert</span></span><br><span class="line">            dest=resultFile)           <span class="comment"># file handle to recieve result</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># close output file</span></span><br><span class="line">    resultFile.close()                 <span class="comment"># close output file</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># return True on success and False on errors</span></span><br><span class="line">    <span class="keyword">return</span> pisaStatus.err</span><br><span class="line"></span><br><span class="line"><span class="comment"># Main program</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pisa.showLogging()</span><br><span class="line">    convertHtmlToPdf(sourceHtml, outputFilename)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以生成PDF文件不存在本地，直接响应PDF文件，声明<code>application/pdf</code>文件类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 渲染页面 这里用到的是flask框架</span></span><br><span class="line">html = render_template(<span class="string">&#x27;path/report_detail.html&#x27;</span>, </span><br><span class="line">                        data=data, <span class="comment"># 页面要渲染的数据</span></span><br><span class="line">                        font_path=<span class="string">&#x27;path/msyh.ttf&#x27;</span>,  <span class="comment"># 因为是PDF文件的中文编码问题，所以要指定兼容中文的字体文件</span></span><br><span class="line">                        logo=<span class="string">&#x27;path/assets/images/logo/dianyi_logo.jpg&#x27;</span>)  <span class="comment"># 静态文件都要用这种方式传过去</span></span><br><span class="line">                       </span><br><span class="line">                        <span class="comment"># 因为css，和js 在生成的PDF文件里样式并不一定生效，所以干脆不传样式文件了。（所以只能生成一下简单一点的PDF文件了）</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;report.pdf&#x27;</span></span><br><span class="line">result = BytesIO() <span class="comment"># 打开字节流</span></span><br><span class="line"><span class="comment"># 生成pdf</span></span><br><span class="line">pdf = pisa.CreatePDF(BytesIO(html.encode(<span class="string">&#x27;utf-8&#x27;</span>)), result, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 生成PDF文件</span></span><br><span class="line">resp = make_response(result.getvalue())  <span class="comment"># 生成http-Response 响应的就是PDF文件的值</span></span><br><span class="line">result.close()</span><br><span class="line">resp.headers[<span class="string">&quot;Content-Disposition&quot;</span>] = (<span class="string">f&quot;inline; filename=&#x27;<span class="subst">&#123;filename&#125;</span>&#x27;&quot;</span>)  <span class="comment"># inline 是在浏览器预览，attachment 是直接下载</span></span><br><span class="line">resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/pdf&#x27;</span></span><br><span class="line">resp.headers[<span class="string">&#x27;verify&#x27;</span>] = <span class="string">&#x27;false&#x27;</span></span><br><span class="line"><span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;方法一：&quot;&gt;&lt;a href=&quot;#方法一：&quot; class=&quot;headerlink&quot; title=&quot;方法一：&quot;&gt;&lt;/a&gt;方法一：&lt;/h5&gt;&lt;p&gt;用到的库  参考：&lt;a href=&quot;http://kaito-kidd.com/2015/03/12/python-html2pdf/&quot;&gt;http://kaito-kidd.com/2015/03/12/python-html2pdf/&lt;/a&gt;&lt;br&gt;&lt;code&gt;import pdfkit&lt;/code&gt;&lt;br&gt;用法:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pdfkit.url(&lt;span class=&quot;string&quot;&gt;&amp;#x27;http://www.baidu.com&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;path/out.pdf&amp;#x27;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# 读取url转PDF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pdfkit.html(&lt;span class=&quot;string&quot;&gt;&amp;#x27;path/test.html&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;path/out.pdf&amp;#x27;&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;# html页面转PDF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pdfkit.string(&lt;span class=&quot;string&quot;&gt;&amp;#x27;hello!&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;path/out.pdf&amp;#x27;&lt;/span&gt;) .  &lt;span class=&quot;comment&quot;&gt;# 字符串转PDF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例代码:&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://icenglou.cn/tags/python/"/>
    
    <category term="HTML" scheme="http://icenglou.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu软件包更新</title>
    <link href="http://icenglou.cn/2019/07/15/Ubuntu%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%9B%B4%E6%96%B0/"/>
    <id>http://icenglou.cn/2019/07/15/Ubuntu%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%9B%B4%E6%96%B0/</id>
    <published>2019-07-15T06:25:55.000Z</published>
    <updated>2022-05-06T16:54:16.387Z</updated>
    
    <content type="html"><![CDATA[<p>当使用<code>sudo apt update</code>来更新软件时，报了这些错误。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hit:1 http://it.archive.ubuntu.com/ubuntu bionic InRelease</span><br><span class="line">Hit:2 http://it.archive.ubuntu.com/ubuntu bionic-updates InRelease                                                                                       </span><br><span class="line">Hit:3 http://it.archive.ubuntu.com/ubuntu bionic-backports InRelease                                                                                     </span><br><span class="line">Hit:4 http://security.ubuntu.com/ubuntu bionic-security InRelease                                     </span><br><span class="line">Hit:5 http://archive.canonical.com/ubuntu bionic InRelease                </span><br><span class="line">Traceback (most recent call last):                    </span><br><span class="line">  File &quot;/usr/lib/cnf-update-db&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    from CommandNotFound.db.creator import DbCreator</span><br><span class="line">ModuleNotFoundError: No module named &#x27;CommandNotFound&#x27;</span><br><span class="line">Reading packages list... Done</span><br><span class="line">E: Problem executing scripts APT::Update::Post-Invoke-Success   </span><br><span class="line"> &#x27;if /usr/bin/test -w /var/lib/command-not-found/ -a -e /usr/lib/cnf-update-db;     </span><br><span class="line"> then /usr/lib/cnf-update-db &gt; /dev/null; fi&#x27;  </span><br><span class="line">E: Sub-process returned an error code  </span><br></pre></td></tr></table></figure><span id="more"></span><p>按提示安装command-not-found <code>sudo apt install --reinstall command-not-found</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Reading package lists... Done </span><br><span class="line">Building dependency tree        </span><br><span class="line">Reading state information... Done</span><br><span class="line">0 upgraded, 0 newly installed, 1 reinstalled, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 0 B/5.188 B of archives</span><br><span class="line">After this operation, 0 B of additional disk space will be used.</span><br><span class="line">(Reading the database ... 225797 files and directories currently installed.)</span><br><span class="line">Preparations for extracting ... / command-not-found_18.04.4_all.deb ...</span><br><span class="line">Extracting command-not-found (18.04.4) on (18.04.4) ...</span><br><span class="line">Configuring command-not-found (18.04.4) ...</span><br><span class="line">libdvd-pkg: Package libdvdcss2-1.4.2-1 was removed, stop processing...</span><br></pre></td></tr></table></figure><p>当我在重新安装完command-not-found之后,再次尝试<code>sudo apt update</code>时，结果还是一样。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo find / -name &#x27;CommandNotFound&#x27;</span><br><span class="line">sudo cp -r /path/of/CommandNotFound /usr/lib/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;当使用&lt;code&gt;sudo apt update&lt;/code&gt;来更新软件时，报了这些错误。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hit:1 http://it.archive.ubuntu.com/ubuntu bionic InRelease&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hit:2 http://it.archive.ubuntu.com/ubuntu bionic-updates InRelease                                                                                       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hit:3 http://it.archive.ubuntu.com/ubuntu bionic-backports InRelease                                                                                     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hit:4 http://security.ubuntu.com/ubuntu bionic-security InRelease                                     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hit:5 http://archive.canonical.com/ubuntu bionic InRelease                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Traceback (most recent call last):                    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &amp;quot;/usr/lib/cnf-update-db&amp;quot;, line 8, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    from CommandNotFound.db.creator import DbCreator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ModuleNotFoundError: No module named &amp;#x27;CommandNotFound&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Reading packages list... Done&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E: Problem executing scripts APT::Update::Post-Invoke-Success   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#x27;if /usr/bin/test -w /var/lib/command-not-found/ -a -e /usr/lib/cnf-update-db;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; then /usr/lib/cnf-update-db &amp;gt; /dev/null; fi&amp;#x27;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E: Sub-process returned an error code  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="服务器" scheme="http://icenglou.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Ubuntu" scheme="http://icenglou.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>文件保存的一个小细节</title>
    <link href="http://icenglou.cn/2018/05/13/%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%BB%86%E8%8A%82/"/>
    <id>http://icenglou.cn/2018/05/13/%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%BB%86%E8%8A%82/</id>
    <published>2018-05-13T09:09:14.000Z</published>
    <updated>2022-05-06T16:55:03.915Z</updated>
    
    <content type="html"><![CDATA[<p>今天我在用flask做上传图片时， 我先将图片读取上传到七牛云，然后再保存在本地，却发现保存在本地图片是空的。</p><p>查资料发现，原来当文件对象file_object被read()后，文件指针会指到最后，所以这时再save()，就只能从最后开始读取内容，内容自然为空。</p><span id="more"></span><p>解决办法就是 file.seek(0)  重新将指针指到开头就可以保存了</p><p>file object ——&gt; io.buffer ——&gt; read()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">imagefile = request.files.get(<span class="string">&#x27;upimage&#x27;</span>) <span class="comment">#上传的图片</span></span><br><span class="line">md5img = hashlib.md5(imagefile.read()).hexdigest() <span class="comment">#图片的md5</span></span><br><span class="line">imagefile.seek(<span class="number">0</span>)</span><br><span class="line">imagefile.save(file_path) <span class="comment">#保存图片</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天我在用flask做上传图片时， 我先将图片读取上传到七牛云，然后再保存在本地，却发现保存在本地图片是空的。&lt;/p&gt;
&lt;p&gt;查资料发现，原来当文件对象file_object被read()后，文件指针会指到最后，所以这时再save()，就只能从最后开始读取内容，内容自然为空。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://icenglou.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python命令中的 -m 参数</title>
    <link href="http://icenglou.cn/2018/04/13/Python%E5%91%BD%E4%BB%A4%E4%B8%AD%E7%9A%84-m-%E5%8F%82%E6%95%B0/"/>
    <id>http://icenglou.cn/2018/04/13/Python%E5%91%BD%E4%BB%A4%E4%B8%AD%E7%9A%84-m-%E5%8F%82%E6%95%B0/</id>
    <published>2018-04-13T09:03:54.000Z</published>
    <updated>2022-05-06T16:54:29.175Z</updated>
    
    <content type="html"><![CDATA[<p>首先看一下python –help里的帮助文档</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python --<span class="built_in">help</span></span><br><span class="line">Options <span class="keyword">and</span> arguments (<span class="keyword">and</span> corresponding environment variables):</span><br><span class="line">-b     : issue warnings about comparing <span class="built_in">bytearray</span> <span class="keyword">with</span> unicode</span><br><span class="line">         (-bb: issue errors)</span><br><span class="line">-B     : don<span class="string">&#x27;t write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x</span></span><br><span class="line"><span class="string">-c cmd : program passed in as string (terminates option list)</span></span><br><span class="line"><span class="string">-d     : debug output from parser; also PYTHONDEBUG=x</span></span><br><span class="line"><span class="string">-E     : ignore PYTHON* environment variables (such as PYTHONPATH)</span></span><br><span class="line"><span class="string">-h     : print this help message and exit (also --help)</span></span><br><span class="line"><span class="string">-i     : inspect interactively after running script; forces a prompt even</span></span><br><span class="line"><span class="string">         if stdin does not appear to be a terminal; also PYTHONINSPECT=x</span></span><br><span class="line"><span class="string">-m mod : run library module as a script (terminates option list)</span></span><br><span class="line"><span class="string">-O     : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x</span></span><br><span class="line"><span class="string">-OO    : remove doc-strings in addition to the -O optimizations</span></span><br><span class="line"><span class="string">-R     : use a pseudo-random salt to make hash() values of various types be</span></span><br><span class="line"><span class="string">         unpredictable between separate invocations of the interpreter, as</span></span><br><span class="line"><span class="string">         a defense against denial-of-service attacks</span></span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>-m  mod run library module as a script (terminates option list)</p></blockquote><p>“mod“是module的缩写，即“-m“选项后面的内容是 module（模块），其作用是把模块当成脚本来运行。</p><p>“terminates option list”意味着“-m”之后的其它选项不起作用，在这点上它跟“-c”是一样的，都是“终极选项”。官方把它们定义为“接口选项”（Interface options），需要区别于其它的普通选项或通用选项。</p><h5 id="m-选项的几个典型用法"><a href="#m-选项的几个典型用法" class="headerlink" title="-m 选项的几个典型用法"></a>-m 选项的几个典型用法</h5><p>1、一行命令实现一个简单的HTTP服务</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m http.server <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:在 Python2 中是这样</span></span><br><span class="line">python -m SimpleHTTPServer <span class="number">8000</span></span><br></pre></td></tr></table></figure><p>执行后，在本机打开 “<a href="http://localhost:8000”，">http://localhost:8000”，</a> 或者在局域网内的其它机器上打开 “http://本机ip:8000” ，就能访问到执行目录下的内容。</p><p>2、<code>python -m pydoc -p 8000</code><br>与第一个类似，需要一行命令“python -m pydoc -p 8000”，就能生成 HTML 格式的官方帮助文档，可以在浏览器中访问。</p><p>3、<code>python -m pdb xxx.py</code><br>执行 pdb 的调试命令“python -m pdb xxx.py”，以调试模式来执行“xxx.py”脚本</p><p>4、<code>python -m timeit &quot;&#39;-&#39;.join(map(str, range(100)))&quot;</code><br>测试代码运行时间，多对比一些代码，可以直观的看出代码的效率差异。以此来优化自己的代码。</p><p>5、<code>python -m pip install ...</code><br>可能我们已经习惯用“ pip install … “来安装第三方库， 但是，Python 的核心开发者、第一届指导委员会五人成员之一的 Brett Cannon 专门写了一篇博客《Why you should use “python -m pip”》，提出应该使用“python -m pip”的方式，并做了详细的解释。</p><p>他的主要观点是：在存在多个 Python 版本的环境中，这种写法可以精确地控制三方库的安装位置。例如用“python3.8 -m pip”，可以明确指定给 3.8 版本安装，而不会混淆成其它的版本。</p><p>6、<code>python -m virtualenv env </code><br>创建项目的虚拟环境，前提是已经用“python -m install virtualenv “安装过这个库了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先看一下python –help里的帮助文档&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ python --&lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Options &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; arguments (&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; corresponding environment variables):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-b     : issue warnings about comparing &lt;span class=&quot;built_in&quot;&gt;bytearray&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; unicode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (-bb: issue errors)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-B     : don&lt;span class=&quot;string&quot;&gt;&amp;#x27;t write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;-c cmd : program passed in as string (terminates option list)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;-d     : debug output from parser; also PYTHONDEBUG=x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;-E     : ignore PYTHON* environment variables (such as PYTHONPATH)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;-h     : print this help message and exit (also --help)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;-i     : inspect interactively after running script; forces a prompt even&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         if stdin does not appear to be a terminal; also PYTHONINSPECT=x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;-m mod : run library module as a script (terminates option list)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;-O     : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;-OO    : remove doc-strings in addition to the -O optimizations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;-R     : use a pseudo-random salt to make hash() values of various types be&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         unpredictable between separate invocations of the interpreter, as&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         a defense against denial-of-service attacks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://icenglou.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>服务器环境搭建</title>
    <link href="http://icenglou.cn/2018/02/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://icenglou.cn/2018/02/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2018-02-15T02:10:37.000Z</published>
    <updated>2022-05-06T16:55:27.081Z</updated>
    
    <content type="html"><![CDATA[<h4 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h4><p><code>ssh root@47.106.85.1**</code><br>如果报错，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /Users/xgf/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in /Users/xgf/.ssh/known_hosts:4</span><br></pre></td></tr></table></figure><p>说明 之前用密钥连过，要删除记录</p><span id="more"></span><p><code>cd ~ &amp;&amp; vim .ssh/known_hosts       #删除对应IP的</code></p><h5 id="新建系统用户"><a href="#新建系统用户" class="headerlink" title="新建系统用户"></a>新建系统用户</h5><p><code>adduser username</code><br>同时设置密码<br>把用户 username 添加到 /etc/sudoers </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">给sudoers添加<span class="string">&quot;写&quot;</span>的权限</span> </span><br><span class="line">chmod +w /etc/sudoers </span><br><span class="line">vim /etc/sudoers </span><br><span class="line"><span class="meta">#</span><span class="bash">修改前：</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> User privilege specification</span> </span><br><span class="line">root    ALL=(ALL:ALL) ALL </span><br><span class="line"><span class="meta">#</span><span class="bash">修改后：</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> User privilege specification</span> </span><br><span class="line">root    ALL=(ALL:ALL) ALL </span><br><span class="line">username       ALL=(ALL:ALL) ALL   </span><br></pre></td></tr></table></figure><p> 切换到用户 <code>su  username</code></p><h5 id="新建密钥"><a href="#新建密钥" class="headerlink" title="新建密钥"></a>新建密钥</h5><p><code>mkdir -m 700 .ssh cd .ssh</code><br>把本机生成的公钥（id_rsa.pub）复制到 authorized_keys</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim authorized_keys  </span><br><span class="line">chmod 600 authorized_keys   </span><br></pre></td></tr></table></figure><p>本机生成密钥对：<code>ssh-keygen -t rsa</code></p><h5 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim config </span><br><span class="line">： </span><br><span class="line">Host          name  # 快捷连接时的别名 </span><br><span class="line">HostName      47.106.85.122  # 服务器外网IP </span><br><span class="line">Port          22 # 端口号 </span><br><span class="line">User          username  # 服务器用户名        </span><br></pre></td></tr></table></figure><p>现在远程连接服务器就可以不用输密码了:  <code>ssh  name</code></p><h4 id="安装Python3-7"><a href="#安装Python3-7" class="headerlink" title="安装Python3.7"></a>安装Python3.7</h4><h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get dist-upgrade</span><br><span class="line">sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus</span><br><span class="line">sudo apt-get install build-essential libncursesw5-dev libgdbm-dev libc6-dev</span><br><span class="line">sudo apt-get install zlib1g-dev libsqlite3-dev tk-dev</span><br><span class="line">sudo apt-get install libssl-dev openssl</span><br><span class="line">sudo apt-get install libffi-dev </span><br></pre></td></tr></table></figure><h5 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载到指定位置</span> </span><br><span class="line">cd /home/download </span><br><span class="line">sudo wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz </span><br><span class="line"></span><br><span class="line">sudo tar xzf Python-3.7.0.tgz           </span><br></pre></td></tr></table></figure><p>一般下载会比较慢，建议本地下载好，再上传上去<br><code>scp Python-3.7.3.tgz username@47.106.85.1**:/home/username/downloads</code></p><p>新建一个安装路径</p><p><code>sudo mkdir -p /usr/local/python3</code></p><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><p>新建一个安装路径</p><p><code>sudo mkdir -p /usr/local/python3</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Python-3.7.0 </span><br><span class="line">sudo ./configure --prefix=/usr/local/python3 --enable-optimizations </span><br><span class="line">sudo make </span><br><span class="line">sudo make install    </span><br></pre></td></tr></table></figure><h5 id="建立软连接"><a href="#建立软连接" class="headerlink" title="建立软连接"></a>建立软连接</h5><p>如果pip3 install有问题，</p><p><code>sudo mv /usr/bin/lsb_release /usr/bin/lsb_release_back</code></p><h4 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-setuptools</span><br><span class="line"></span><br><span class="line">easy_install supervisor</span><br><span class="line"></span><br><span class="line">supervisor -v</span><br><span class="line">4.0.1</span><br><span class="line"></span><br><span class="line">mkdir /home/xgf/etc/supervisor</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br><span class="line">vim /etc/supervisord.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后两行注释去了</span></span><br><span class="line">[include]</span><br><span class="line">files = /home/xgf/etc/supervisor/*.conf   # 前面建的目录里放配置文件       </span><br></pre></td></tr></table></figure><h4 id="启用crontab-做定时任务"><a href="#启用crontab-做定时任务" class="headerlink" title="启用crontab  做定时任务"></a>启用crontab  做定时任务</h4><p><code>crontab -l  # 查看</code></p><p>若报错  no crontab for xxx ，就是还没启用</p><p><code>crontab -e  # 编辑</code></p><p>一般还要选择编辑器： </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e  # 编辑</span><br><span class="line">一般还要选择编辑器：</span><br><span class="line">Select an editor.  To change later, run &#x27;select-editor&#x27;.</span><br><span class="line">  1. /bin/nano        &lt;---- easiest</span><br><span class="line">  2. /usr/bin/vim.basic</span><br><span class="line">  3. /usr/bin/vim.tiny</span><br><span class="line">  4. /bin/ed</span><br><span class="line"></span><br><span class="line">Choose 1-4 [1]: 2</span><br><span class="line">这里选 2 vim.basic</span><br><span class="line">esc &gt; : &gt; wq #退出          </span><br></pre></td></tr></table></figure><p>这样crontab就可以正常用了  , 使用教程：<a href="https://blog.csdn.net/HRG520JN/article/details/81119156">https://blog.csdn.net/HRG520JN/article/details/81119156</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 1 * * * cd ~/python_projects/os_speaker &amp;&amp; env/bin/python command.py hotel_list &gt;&gt; ~/python_projects/os_speaker/log/hotel_list.log 2&gt;&amp;1</span><br><span class="line">5 1 * * * cd ~/python_projects/os_speaker &amp;&amp; env/bin/python command.py room_list &gt;&gt; ~/python_projects/os_speaker/log/room_list.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y mysql-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化配置</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line">选择时： n n y n y y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查mysql服务状态</span></span><br><span class="line">systemctl status mysql.service</span><br></pre></td></tr></table></figure><h4 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h4><p><code>sudo apt-get install -y redis</code></p><p>如果报错  参考： <a href="https://blog.csdn.net/i_chenjiahui/article/details/89435093">https://blog.csdn.net/i_chenjiahui/article/details/89435093</a>   {</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">net.ipv6.conf.all.disable_ipv6 = 1  <span class="comment">#注释这条。</span></span></span><br><span class="line">net.ipv6.conf.eth0.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 1 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使修改生效</span> </span><br><span class="line">sudo sysctl -p    </span><br></pre></td></tr></table></figure><p> } ………….</p><h5 id="设置密码（非必须）"><a href="#设置密码（非必须）" class="headerlink" title="设置密码（非必须）"></a>设置密码（非必须）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/redis/redis.conf</span><br><span class="line">requirepass 123456</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启远程访问</span></span><br><span class="line"><span class="meta">#</span><span class="bash">注释<span class="built_in">bind</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务控制</span></span><br><span class="line">sudo systemctl start redis#启动</span><br><span class="line">sudo systemctl stop redis#关闭</span><br><span class="line">sudo systemctl restart redis #重启</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试连接</span></span><br><span class="line">:~$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt;     </span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查是否安装成功</span></span><br><span class="line">nginx -v</span><br><span class="line"></span><br><span class="line">安装好的文件位置：</span><br><span class="line">/usr/sbin/nginx：主程序</span><br><span class="line">/etc/nginx：存放配置文件</span><br><span class="line">/usr/share/nginx：存放静态文件</span><br><span class="line">/var/log/nginx：存放日志     </span><br></pre></td></tr></table></figure><p>一般情况下，现在用浏览器访问主机名或域名，可以看到：<br><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1a6lset29j20vc0g2gn9.jpg" alt="image-20220415100859433"><br> 但是，服务器默认是没有开放80端口的，所以远程访问还是访问不了的。需要去阿里云控制台配置安全组规则，打开80端口。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;连接服务器&quot;&gt;&lt;a href=&quot;#连接服务器&quot; class=&quot;headerlink&quot; title=&quot;连接服务器&quot;&gt;&lt;/a&gt;连接服务器&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ssh root@47.106.85.1**&lt;/code&gt;&lt;br&gt;如果报错，&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Please contact your system administrator.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Add correct host key in /Users/xgf/.ssh/known_hosts to get rid of this message.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Offending ECDSA key in /Users/xgf/.ssh/known_hosts:4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明 之前用密钥连过，要删除记录&lt;/p&gt;</summary>
    
    
    
    
    <category term="服务器" scheme="http://icenglou.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
