{"meta":{"title":"层楼","subtitle":"少年不识愁滋味,爱上层楼.爱上层楼.","description":"--------------------","author":"nnocase","url":"http://icenglou.cn","root":"/"},"pages":[{"title":"","date":"2022-05-07T12:36:11.484Z","updated":"2022-05-07T12:36:11.484Z","comments":true,"path":"about/index.html","permalink":"http://icenglou.cn/about/","excerpt":"","text":"层楼Pythonista，90后，写点代码糊口文章GitHub友链留言 关于本站本站是个人博客，不放置任何推广链接。内容以技术积累为主，也不排除会写一些生活方面或者其它主题的内容。季更博主，精力有限，为了保证文章质量，篇数不会很多，已经发布过的文章也会不定期审查和更新（以免过时的内容误导读者）。"},{"title":"categories","date":"2022-04-16T08:07:13.000Z","updated":"2022-05-06T16:58:01.094Z","comments":true,"path":"categories/index.html","permalink":"http://icenglou.cn/categories/","excerpt":"","text":""},{"title":"","date":"2022-05-07T12:55:14.776Z","updated":"2022-05-07T12:55:14.776Z","comments":true,"path":"friends/index.html","permalink":"http://icenglou.cn/friends/","excerpt":"","text":"海内存知己 天涯若比邻暂无友友～_～ 如何添加友链？先友后链，在我们有一定了解了之后才可以交换友链，除此之外，您的网站还应满足以下条件： 合法的、非营利性、无商业广告 有实质性原创内容的 HTTPS 站点 第一步：新建 Issue本页面留言(https://github.com/xaoxuu/friends/issues/) 按照模板格式填写并提交。为了提高图片加载速度，建议优化头像：打开 压缩图 上传自己的头像，将图片尺寸调整到 96px 后下载。将压缩后的图片上传到 去不图床 并使用此图片链接作为头像。第二步：添加友链并等待管理员审核请添加本站到您的友链中，如果您有添加我，只需按照如下格式留言即可即可。title: 层楼avatar: https://tva1.sinaimg.cn/large/e6c9d24egy1h1zrhunqz4j20u00u0abv.jpgurl: https://icenglou.cnscreenshot: https://tva1.sinaimg.cn/large/e6c9d24egy1h204mqr4axj21p10u0q87.jpg待管理员审核通过，添加了 active 标签后，回来刷新即可生效。 如果您需要更新自己的友链，请直接留言告诉我。"},{"title":"tags","date":"2022-04-16T08:07:11.000Z","updated":"2022-05-06T16:58:12.932Z","comments":true,"path":"tags/index.html","permalink":"http://icenglou.cn/tags/","excerpt":"","text":""},{"title":"便笺","date":"2022-05-07T03:54:29.291Z","updated":"2022-05-07T03:54:29.291Z","comments":true,"path":"nodes/index.html","permalink":"http://icenglou.cn/nodes/","excerpt":"","text":"TOC便笺Mac 相关问题 国内镜像站清华大学开源软件镜像站https://mirrors.tuna.tsinghua.edu.cn阿里云官方镜像站https://developer.aliyun.com/mirror/Mac 应用下载MacWk精品mac软件下载MacBL马可菠萝 - 分享你喜欢的MAC应用Xclient精品MAC应用分享行业大佬OneV's Den上善若水，人淡如菊曾静的博客但行好事，莫问前程唐巧的博客记录下自己学习的点滴步步走前端大佬设计灵感和素材UnsplashPhotos for everyone.DribbbleDiscover the world’s top designers & creatives.FlaticonAccess 3,260,000 vector icons.uplabsUnlimited Android Templates Ready for Commercial Use - UpLabsCodyHouseWeb Design Made Easier创造狮导航Discover the world’s top designers & creatives.Pinterest寻找值得尝试的新点子Iconfont阿里巴巴矢量图标库easyicon多彩图标HTML5 UPHTML5 网站模板WallpaperAccess高质量壁纸pixel4k高清壁纸Material PaletteMaterial Design Color Palette Generator.设计师网址导航优设导航 - 学设计从这里开始！在线工具thum.io快速生成网站截图Neumorphism.ioGenerate Soft-UI CSS codeShields IOhttps://shields.iojson.cnhttps://www.json.cnFavicon Generatorhttps://realfavicongenerator.net去不图床免费图床vim-cn.com免费图床david-smith.org查询iOS各个版本用户量iPhone 参数大全https://kylebing.cn/tools/iphone/LaTeX公式编辑器https://www.latexlive.com/技术社区Stack Overflowhttps://stackoverflow.comCocoaChinahttp://www.cocoachina.comRUNOOBhttp://www.runoob.comW3schoolhttp://www.w3school.com.cnTensorFlow中文社区http://www.tensorfly.cn廖雪峰的官方网站https://www.liaoxuefeng.com"},{"title":"认识 Git","date":"2022-05-07T03:26:34.881Z","updated":"2022-05-07T03:26:34.881Z","comments":true,"path":"wiki/git/index.html","permalink":"http://icenglou.cn/wiki/git/","excerpt":"","text":"什么是 Git ？Git 是目前世界上最先进的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 Git 与 SVN 区别点 Git 是分布式的，SVN 不是。这是 Git 和其它非分布式的版本控制系统如 SVN，CVS 等最核心的区别。 Git 把内容按元数据方式存储，而 SVN 是按文件。 Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。 Git 没有一个全局的版本号，而 SVN 有。目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。 Git 的内容完整性要优于 SVN。Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 图片来源于 RUNOOB Git 工作区、暂存区和版本库 工作区：就是你在电脑里能看到的目录。 暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。"},{"title":"Mac 相关问题","date":"2022-05-07T03:35:27.822Z","updated":"2022-05-07T03:35:27.822Z","comments":true,"path":"nodes/mac/index.html","permalink":"http://icenglou.cn/nodes/mac/","excerpt":"","text":"提示 “安装包已损坏” 怎么办？ 清理 Mac 的 DNS 缓存sudo killall -HUP mDNSRespondersudo killall mDNSResponderHelpersudo dscacheutil -flushcache TNT 团队的应用无法使用怎么办？TNT 的证书签署的软件在 2019年7月12日 后都不能运行了，临时的解决办法，就是自己签名。1. 安装 Xcode安装 Xcode，你可以在 App Store 中下载安装，并且至少运行一次。2. 安装 Command Line Tools 工具打开终端工具输入如下命令：弹出后选择继续安装。3. 为应用签名打开终端工具输入并执行如下命令：codesign --force --deep --sign - /Applications/name.app注意后面的文件路径，你可以打开访达找到应用程序，找到要签名的软件，直接拖入「终端」界面，即可自动生成路径。 显示隐藏文件查询 SIP 状态关闭 SIP开启 SIP如果输出以下信息，说明 SIP 开启，需要暂时将 SIP 关闭。System Integrity Protection status: enabled.重启 Mac，按住 command + R 直到出现开机 logo，此时会进入 Recovery 模式，选择「实用工具」-&gt;「Terminal」并输入以下命令：然后重新启动电脑即可关闭 SIP。重启 Mac，按住 command + R 直到出现开机 logo，此时会进入 Recovery 模式，选择「实用工具」-&gt;「Terminal」并输入以下命令：然后重新启动电脑即可开启 SIP。 搭载 Intel 芯片的 Mac 启动组合键Command (⌘)-R：从内建的 macOS 恢复系统启动。或者，您也可以使用 Option-Command-R 或 Shift-Option-Command-R 以通过互联网从 macOS 恢复功能启动。macOS 恢复功能可以安装不同版本的 macOS，具体取决于您在电脑启动时使用的组合键。如果您的 Mac 使用了固件密码，系统将提示您输入这个密码。Option (⌥) 或 Alt：启动进入“启动管理器”，您可以从中选取其他可用的启动磁盘或宗卷。如果您的 Mac 使用了固件密码，系统将提示您输入这个密码。Option-Command-P-R：重置 NVRAM 或 PRAM。如果您的 Mac 使用了固件密码，电脑会忽略这个组合键或从 macOS 恢复功能启动。Shift (⇧) ：以安全模式启动。如果使用了固件密码，这个组合键将被停用。D：启动进入“Apple 诊断”实用工具。也可以使用 Option-D 通过互联网启动进入这个实用工具。如果使用了固件密码，这个组合键将被停用。N：从 NetBoot 服务器启动，前提是您的 Mac 支持网络启动宗卷。要使用服务器上默认的引导映像，请按住 Option-N。如果使用了固件密码，这个组合键将被停用。Command-S：以单用户模式启动。如果运行的是 macOS Mojave 或更高版本，或者使用了固件密码，这个组合键会被停用。T：以目标磁盘模式启动。如果使用了固件密码，这个组合键将被停用。Command-V：以详细模式启动。如果使用了固件密码，这个组合键将被停用。推出键 (⏏)、F12、鼠标按钮或触控板按钮：推出可移动介质，例如光盘。如果使用了固件密码，这个组合键将被停用。"}],"posts":[{"title":"Mac端口5000被ControlCe占用的问题","slug":"Mac端口5000被ControlCe占用的问题","date":"2022-04-27T06:30:21.000Z","updated":"2022-05-06T16:54:37.561Z","comments":true,"path":"2022/04/27/Mac端口5000被ControlCe占用的问题/","link":"","permalink":"http://icenglou.cn/2022/04/27/Mac%E7%AB%AF%E5%8F%A35000%E8%A2%ABControlCe%E5%8D%A0%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"查看端口占用情况 lsof -i:端口号 $ lsof -i:5000COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEControlCe 491 xgf 23u IPv4 0xa14657c0803f967 0t0 TCP *:commplex-main (LISTEN)ControlCe 491 xgf 24u IPv6 0xa14657746fd3fcf 0t0 TCP *:commplex-main (LISTEN) 显示进程ControlCe在占用5000端口，这是系统进程Control Center(隔空播放)，把它kill掉还是会自动启动起来。占用的是 0.0.0.0:5000 解决方法","text":"查看端口占用情况 lsof -i:端口号 $ lsof -i:5000COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEControlCe 491 xgf 23u IPv4 0xa14657c0803f967 0t0 TCP *:commplex-main (LISTEN)ControlCe 491 xgf 24u IPv6 0xa14657746fd3fcf 0t0 TCP *:commplex-main (LISTEN) 显示进程ControlCe在占用5000端口，这是系统进程Control Center(隔空播放)，把它kill掉还是会自动启动起来。占用的是 0.0.0.0:5000 解决方法 在系统设置里关掉 “共享–隔空播放接收器” 就可以了","categories":[],"tags":[{"name":"Mac","slug":"mac","permalink":"http://icenglou.cn/tags/mac/"}]},{"title":"HTML页面转换成PDF","slug":"HTML页面转化成PDF","date":"2019-10-15T06:57:21.000Z","updated":"2022-05-06T16:54:48.978Z","comments":true,"path":"2019/10/15/HTML页面转化成PDF/","link":"","permalink":"http://icenglou.cn/2019/10/15/HTML%E9%A1%B5%E9%9D%A2%E8%BD%AC%E5%8C%96%E6%88%90PDF/","excerpt":"方法一：用到的库 参考：http://kaito-kidd.com/2015/03/12/python-html2pdf/import pdfkit用法: pdfkit.url(&#x27;http://www.baidu.com&#x27;, &#x27;path/out.pdf&#x27;) # 读取url转PDFpdfkit.html(&#x27;path/test.html&#x27;, &#x27;path/out.pdf&#x27;) # html页面转PDFpdfkit.string(&#x27;hello!&#x27;, &#x27;path/out.pdf&#x27;) . # 字符串转PDF 实例代码:","text":"方法一：用到的库 参考：http://kaito-kidd.com/2015/03/12/python-html2pdf/import pdfkit用法: pdfkit.url(&#x27;http://www.baidu.com&#x27;, &#x27;path/out.pdf&#x27;) # 读取url转PDFpdfkit.html(&#x27;path/test.html&#x27;, &#x27;path/out.pdf&#x27;) # html页面转PDFpdfkit.string(&#x27;hello!&#x27;, &#x27;path/out.pdf&#x27;) . # 字符串转PDF 实例代码: html = render_template(&#x27;path.html&#x27;, items=items)# 页面用到的css文件css = [current_app.root_path + url_for(&#x27;static&#x27;, filename=&#x27;path.css&#x27;), current_app.root_path + url_for(&#x27;static&#x27;, filename=&#x27;path.js&#x27;)]# 一些API# 导出的PDF页面参数的设置options = &#123; &#x27;page-size&#x27;: &#x27;Letter&#x27;, &#x27;margin-top&#x27;: &#x27;0.25in&#x27;, &#x27;margin-right&#x27;: &#x27;0.2in&#x27;, &#x27;margin-bottom&#x27;: &#x27;0.25in&#x27;, &#x27;margin-left&#x27;: &#x27;0.2in&#x27;&#125;filename = &#x27;path/filename.pdf&#x27;pdfkit.from_string(html, filename, css=css, options=options) 这个方法比较缺点是，页面渲染很难调，页面样式不兼容，中文乱码等问题。解决中文乱码不建议在生产环境中使用，有坑。生产环境X server问题 方法二、xhtml2pdf官方文档 示例代码： from xhtml2pdf import pisa# Define your datasourceHtml = &quot;&lt;html&gt;&lt;body&gt;&lt;p&gt;To PDF or not to PDF&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;outputFilename = &quot;test.pdf&quot;# Utility functiondef convertHtmlToPdf(sourceHtml, outputFilename): # open output file for writing (truncated binary) resultFile = open(outputFilename, &quot;w+b&quot;) # convert HTML to PDF pisaStatus = pisa.CreatePDF( sourceHtml, # the HTML to convert dest=resultFile) # file handle to recieve result # close output file resultFile.close() # close output file # return True on success and False on errors return pisaStatus.err# Main programif __name__ == &quot;__main__&quot;: pisa.showLogging() convertHtmlToPdf(sourceHtml, outputFilename) 也可以生成PDF文件不存在本地，直接响应PDF文件，声明application/pdf文件类型 # 渲染页面 这里用到的是flask框架html = render_template(&#x27;path/report_detail.html&#x27;, data=data, # 页面要渲染的数据 font_path=&#x27;path/msyh.ttf&#x27;, # 因为是PDF文件的中文编码问题，所以要指定兼容中文的字体文件 logo=&#x27;path/assets/images/logo/dianyi_logo.jpg&#x27;) # 静态文件都要用这种方式传过去 # 因为css，和js 在生成的PDF文件里样式并不一定生效，所以干脆不传样式文件了。（所以只能生成一下简单一点的PDF文件了）filename = &#x27;report.pdf&#x27;result = BytesIO() # 打开字节流# 生成pdfpdf = pisa.CreatePDF(BytesIO(html.encode(&#x27;utf-8&#x27;)), result, encoding=&#x27;utf-8&#x27;) # 生成PDF文件resp = make_response(result.getvalue()) # 生成http-Response 响应的就是PDF文件的值result.close()resp.headers[&quot;Content-Disposition&quot;] = (f&quot;inline; filename=&#x27;&#123;filename&#125;&#x27;&quot;) # inline 是在浏览器预览，attachment 是直接下载resp.headers[&#x27;Content-Type&#x27;] = &#x27;application/pdf&#x27;resp.headers[&#x27;verify&#x27;] = &#x27;false&#x27;return resp","categories":[],"tags":[{"name":"Python","slug":"python","permalink":"http://icenglou.cn/tags/python/"},{"name":"HTML","slug":"html","permalink":"http://icenglou.cn/tags/html/"}]},{"title":"Ubuntu软件包更新","slug":"Ubuntu软件包更新","date":"2019-07-15T06:25:55.000Z","updated":"2022-05-06T16:54:16.387Z","comments":true,"path":"2019/07/15/Ubuntu软件包更新/","link":"","permalink":"http://icenglou.cn/2019/07/15/Ubuntu%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%9B%B4%E6%96%B0/","excerpt":"当使用sudo apt update来更新软件时，报了这些错误。 Hit:1 http://it.archive.ubuntu.com/ubuntu bionic InReleaseHit:2 http://it.archive.ubuntu.com/ubuntu bionic-updates InRelease Hit:3 http://it.archive.ubuntu.com/ubuntu bionic-backports InRelease Hit:4 http://security.ubuntu.com/ubuntu bionic-security InRelease Hit:5 http://archive.canonical.com/ubuntu bionic InRelease Traceback (most recent call last): File &quot;/usr/lib/cnf-update-db&quot;, line 8, in &lt;module&gt; from CommandNotFound.db.creator import DbCreatorModuleNotFoundError: No module named &#x27;CommandNotFound&#x27;Reading packages list... DoneE: Problem executing scripts APT::Update::Post-Invoke-Success &#x27;if /usr/bin/test -w /var/lib/command-not-found/ -a -e /usr/lib/cnf-update-db; then /usr/lib/cnf-update-db &gt; /dev/null; fi&#x27; E: Sub-process returned an error code","text":"当使用sudo apt update来更新软件时，报了这些错误。 Hit:1 http://it.archive.ubuntu.com/ubuntu bionic InReleaseHit:2 http://it.archive.ubuntu.com/ubuntu bionic-updates InRelease Hit:3 http://it.archive.ubuntu.com/ubuntu bionic-backports InRelease Hit:4 http://security.ubuntu.com/ubuntu bionic-security InRelease Hit:5 http://archive.canonical.com/ubuntu bionic InRelease Traceback (most recent call last): File &quot;/usr/lib/cnf-update-db&quot;, line 8, in &lt;module&gt; from CommandNotFound.db.creator import DbCreatorModuleNotFoundError: No module named &#x27;CommandNotFound&#x27;Reading packages list... DoneE: Problem executing scripts APT::Update::Post-Invoke-Success &#x27;if /usr/bin/test -w /var/lib/command-not-found/ -a -e /usr/lib/cnf-update-db; then /usr/lib/cnf-update-db &gt; /dev/null; fi&#x27; E: Sub-process returned an error code 按提示安装command-not-found sudo apt install --reinstall command-not-found Reading package lists... Done Building dependency tree Reading state information... Done0 upgraded, 0 newly installed, 1 reinstalled, 0 to remove and 0 not upgraded.Need to get 0 B/5.188 B of archivesAfter this operation, 0 B of additional disk space will be used.(Reading the database ... 225797 files and directories currently installed.)Preparations for extracting ... / command-not-found_18.04.4_all.deb ...Extracting command-not-found (18.04.4) on (18.04.4) ...Configuring command-not-found (18.04.4) ...libdvd-pkg: Package libdvdcss2-1.4.2-1 was removed, stop processing... 当我在重新安装完command-not-found之后,再次尝试sudo apt update时，结果还是一样。 解决方案sudo find / -name &#x27;CommandNotFound&#x27;sudo cp -r /path/of/CommandNotFound /usr/lib/","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://icenglou.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"Ubuntu","slug":"ubuntu","permalink":"http://icenglou.cn/tags/ubuntu/"}]},{"title":"配置CDN加速","slug":"配置CDN加速","date":"2018-12-23T13:00:59.000Z","updated":"2022-05-06T16:55:22.097Z","comments":true,"path":"2018/12/23/配置CDN加速/","link":"","permalink":"http://icenglou.cn/2018/12/23/%E9%85%8D%E7%BD%AECDN%E5%8A%A0%E9%80%9F/","excerpt":"发现访问博客时图片渲染过慢，于是打算给博客配置CDN加速。目前阿里云有付费的CDN方案，怎奈实在囊中羞涩，只好寻求免费的CDN CDN （Content Delivery Network or Content Ddistribute Network）内容分发网络。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。类似分布各地的物流仓储网络，CDN网络可以将源站的内容缓存到分布全球的CDN节点，根据用户的访问IP，就近连接CDN，提高网站响应速度。一般的网站只有一台或一组服务器，用户访问站点时请求需要跨越复杂的路由链路，抵达网站服务器，经过tcp三次握手建立连接，服务器才会将站点数据传输给用户。","text":"发现访问博客时图片渲染过慢，于是打算给博客配置CDN加速。目前阿里云有付费的CDN方案，怎奈实在囊中羞涩，只好寻求免费的CDN CDN （Content Delivery Network or Content Ddistribute Network）内容分发网络。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。类似分布各地的物流仓储网络，CDN网络可以将源站的内容缓存到分布全球的CDN节点，根据用户的访问IP，就近连接CDN，提高网站响应速度。一般的网站只有一台或一组服务器，用户访问站点时请求需要跨越复杂的路由链路，抵达网站服务器，经过tcp三次握手建立连接，服务器才会将站点数据传输给用户。 使用CDN加速后，CDN在全球的分布式节点将会拷贝一份源站的数据（图片、js、html等等），称为缓存，用户在访问源站域名时会被DNS解析到最近的CDN服务器，并且访问缓存资源。普通的网站访问流程和使用CDN的网站访问如下图，其中蓝色链路是无CDN的链路 作者：MachinePlay链接：https://www.jianshu.com/p/18e74c088133来源：简书 搜了下，最后选择了CloudFlare1、注册账号2、添加站点，输入自己的域名（只需跟域名——一级域名）3、选择免费的套餐，确认，跳过4、这里给到两个DNS解析服务器，需要到域名注册商修改DNS解析服务器（这里我用的阿里云），修改会收到短信验证5、修改完后，点击完成，稍等一会收到邮件代表成功了 这是ping一下自己的网站就能看到访问的IP变了 没CDN前： ~$ ping www.icenglou.cnPING www.icenglou.cn (47.106.85.122): 56 data bytes64 bytes from 47.106.**.*22: icmp_seq=0 ttl=52 time=8.926 ms64 bytes from 47.106.**.*22: icmp_seq=1 ttl=52 time=8.836 ms64 bytes from 47.106.**.*22: icmp_seq=2 ttl=52 time=9.943 ms64 bytes from 47.106.**.*22: icmp_seq=3 ttl=52 time=16.017 ms CDN加速后： ~$ ping www.icenglou.cnPING www.icenglou.cn (47.106.85.122): 56 data bytes64 bytes from 104.28.**.*6: icmp_seq=0 ttl=52 time=8.926 ms64 bytes from 47.106.**.*22: icmp_seq=1 ttl=52 time=8.836 ms64 bytes from 104.28.**.*6: icmp_seq=2 ttl=52 time=9.943 ms64 bytes from 47.106.**.*22: icmp_seq=3 ttl=52 time=16.017 ms 访问一下博客，确实感觉快了点（不知道是不是心理作用，免费套餐的节点还是比较少的） 转载自：知乎每日VPS老谢","categories":[],"tags":[{"name":"CDN","slug":"cdn","permalink":"http://icenglou.cn/tags/cdn/"}]},{"title":"用Python给图片添加水印","slug":"用Python给图片添加水印","date":"2018-12-12T15:21:53.000Z","updated":"2022-05-06T16:54:58.093Z","comments":true,"path":"2018/12/12/用Python给图片添加水印/","link":"","permalink":"http://icenglou.cn/2018/12/12/%E7%94%A8Python%E7%BB%99%E5%9B%BE%E7%89%87%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/","excerpt":"直接看代码： from PIL import Image,ImageDraw,ImageFont, ImageEnhanceim = Image.open(&#x27;my_pic.jpeg&#x27;)w, h = im.sizewatermark = Image.new(&#x27;RGBA&#x27;, im.size) # 水印draw = ImageDraw.Draw(watermark, &#x27;RGBA&#x27;)# 设置文字大小font_size = 50# 设置字体font_file = &quot;simsun.ttc&quot;font = ImageFont.truetype(font_file,font_size )draw.text((10, 20), &#x27;这是水印内容&#x27;, fill=&quot;#ff0000&quot;, font=font)# 第一个参数：表示文字起始坐标# 第二个参数：表示写入内容# fill：表示颜色# font：字体# 旋转 45 度# watermark = watermark.rotate(45, Image.BICUBIC)watermark = watermark.rotate(0, Image.BICUBIC)# 透明的alpha = watermark.split()[3]alpha = ImageEnhance.Brightness(alpha).enhance(0.7)watermark.putalpha(alpha)# 合成新的图片n = Image.composite(watermark, im, watermark)n.save(&#x27;new_watermark.jpeg&#x27;, &#x27;JPEG&#x27;) 效果：","text":"直接看代码： from PIL import Image,ImageDraw,ImageFont, ImageEnhanceim = Image.open(&#x27;my_pic.jpeg&#x27;)w, h = im.sizewatermark = Image.new(&#x27;RGBA&#x27;, im.size) # 水印draw = ImageDraw.Draw(watermark, &#x27;RGBA&#x27;)# 设置文字大小font_size = 50# 设置字体font_file = &quot;simsun.ttc&quot;font = ImageFont.truetype(font_file,font_size )draw.text((10, 20), &#x27;这是水印内容&#x27;, fill=&quot;#ff0000&quot;, font=font)# 第一个参数：表示文字起始坐标# 第二个参数：表示写入内容# fill：表示颜色# font：字体# 旋转 45 度# watermark = watermark.rotate(45, Image.BICUBIC)watermark = watermark.rotate(0, Image.BICUBIC)# 透明的alpha = watermark.split()[3]alpha = ImageEnhance.Brightness(alpha).enhance(0.7)watermark.putalpha(alpha)# 合成新的图片n = Image.composite(watermark, im, watermark)n.save(&#x27;new_watermark.jpeg&#x27;, &#x27;JPEG&#x27;) 效果：","categories":[],"tags":[{"name":"Python","slug":"python","permalink":"http://icenglou.cn/tags/python/"},{"name":"Pillow","slug":"pillow","permalink":"http://icenglou.cn/tags/pillow/"}]},{"title":"事务的理解","slug":"事务的理解","date":"2018-10-23T13:00:59.000Z","updated":"2022-05-06T16:55:16.608Z","comments":true,"path":"2018/10/23/事务的理解/","link":"","permalink":"http://icenglou.cn/2018/10/23/%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"事务(基于PostgreSQL)事务最重要的一点就是将多个步骤捆绑成一个单一的、要么全完成要么全不完成的操作 例如，考虑一个保存着多个客户账户余额和支行总存款额的银行数据库。假设我们希望记录一笔从Alice的账户到Bob的账户的额度为100.00美元的转账。在最大程度地简化后，涉及到的SQL命令是：","text":"事务(基于PostgreSQL)事务最重要的一点就是将多个步骤捆绑成一个单一的、要么全完成要么全不完成的操作 例如，考虑一个保存着多个客户账户余额和支行总存款额的银行数据库。假设我们希望记录一笔从Alice的账户到Bob的账户的额度为100.00美元的转账。在最大程度地简化后，涉及到的SQL命令是： UPDATE accounts SET balance = balance - 100.00 WHERE name = &#x27;Alice&#x27;;UPDATE branches SET balance = balance - 100.00 WHERE name = (SELECT branch_name FROM accounts WHERE name = &#x27;Alice&#x27;);UPDATE accounts SET balance = balance + 100.00 WHERE name = &#x27;Bob&#x27;;UPDATE branches SET balance = balance + 100.00 WHERE name = (SELECT branch_name FROM accounts WHERE name = &#x27;Bob&#x27;); 显而易见，为了完成这样一个简单的操作，数据库涉及到了多个独立的更新。但是独立的更新不能保障数据的一致性，不能发生因为系统错误导致Bob收到100美元而Alice并未被扣款的情况。这个时候就需要将这些更新组织成一个事务了，因为事务具有原子性和一致性： 1、原子性 ——Atomicity事务里的所有操作要么一起成功，要么一起失败回滚。 2、一致性 ——Consistency数据在事务执行前后，从一个一致性状态转变至另一个一致性状态。 同时，一个事务被数据库系统完成并认可，我们也希望永久地记录下来且即便其后发生崩溃也不会被丢失。例如，如果我们正在记录Bob的一次现金提款，我们当然不希望他刚走出银行大门，对他账户的扣款就消失。一个事务型数据库保证一个事务在被报告为完成之前它所做的所有更新都被记录在持久存储（即磁盘）。这就是事务的另一个特性——持久性 3、持久性 ——Durability事务一旦提交，对数据库造成的影响是永久性的，即便数据库遭遇断网断电等故障，也不会丢失提交的更新。 但是，现在还有一个问题，现实中并不是只有一个Alice转账给Bob的情况，当多个事务并发生，如何保证数据的一致性？这里就要讲到事务的第四大特性——隔离性： 4、隔离性——Isolation当多个事务并发访问数据库时，各个事务之间应该是隔离的，独立的。一个事务不应该影响其他事务的效果。事务查看数据更新时，数据要么是其他事务执行前的状态，要么是其他事务执行后的状态，不能看到中间的状态。 当多个事务并发运行时，每一个都不能看到其他事务未完成的修改。 完全的隔离性只有事务串行执行，那样则不存在并发，效率很低，因此在开发中应结合业务需求设置事务的隔离级别，隔离级别越高，效率越低，反之，效率越高。四个隔离级别稍后介绍。 例如，如果一个事务正忙着总计所有支行的余额，它不会只包括Alice的支行的扣款而不包括Bob的支行的存款，或者反之。所以事务的全做或全不做并不只体现在它们对数据库的持久影响，也体现在它们发生时的可见性。一个事务所做的更新在它完成之前对于其他事务是不可见的，而之后所有的更新将同时变得可见。 在PostgreSQL中，开启一个事务需要将SQL命令用BEGIN和COMMIT命令包围起来。因此我们的银行事务看起来会是这样： BEGIN;UPDATE accounts SET balance = balance - 100.00 WHERE name = &#x27;Alice&#x27;;-- etc etcCOMMIT; 如果，在事务执行中我们并不想提交（或许是我们注意到Alice的余额不足），我们可以发出ROLLBACK命令而不是COMMIT命令，这样所有目前的更新将会被取消。 PostgreSQL实际上将每一个SQL语句都作为一个事务来执行。如果我们没有发出BEGIN命令，则每个独立的语句都会被加上一个隐式的BEGIN以及（如果成功）COMMIT来包围它。一组被BEGIN和COMMIT包围的语句也被称为一个事务块。 注意某些客户端库会自动发出BEGIN和COMMIT命令，因此我们可能会在不被告知的情况下得到事务块的效果。 也可以利用保存点来以更细的粒度来控制一个事务中的语句。保存点允许我们有选择性地放弃事务的一部分而提交剩下的部分。在使用SAVEPOINT定义一个保存点后，我们可以在必要时利用ROLLBACK TO回滚到该保存点。该事务中位于保存点和回滚点之间的数据库修改都会被放弃，但是早于该保存点的修改则会被保存。 在回滚到保存点之后，它的定义依然存在，因此我们可以多次回滚到它。反过来，如果确定不再需要回滚到特定的保存点，它可以被释放以便系统释放一些资源。记住不管是释放保存点还是回滚到保存点都会释放定义在该保存点之后的所有其他保存点。 所有这些都发生在一个事务块内，因此这些对于其他数据库会话都不可见。当提交整个事务块时，被提交的动作将作为一个单元变得对其他会话可见，而被回滚的动作则永远不会变得可见。 记住那个银行数据库，假设我们从Alice的账户扣款100美元，然后存款到Bob的账户，结果直到最后才发现我们应该存到Wally的账户。我们可以通过使用保存点来做这件事： BEGIN;UPDATE accounts SET balance = balance - 100.00 WHERE name = &#x27;Alice&#x27;;SAVEPOINT my_savepoint;UPDATE accounts SET balance = balance + 100.00 WHERE name = &#x27;Bob&#x27;;-- oops ... forget that and use Wally&#x27;s accountROLLBACK TO my_savepoint;UPDATE accounts SET balance = balance + 100.00 WHERE name = &#x27;Wally&#x27;;COMMIT; 当然，这个例子是被过度简化的，但是在一个事务块中使用保存点存在很多种控制可能性。此外，ROLLBACK TO是唯一的途径来重新控制一个由于错误被系统置为中断状态的事务块，而不是完全回滚它并重新启动。","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://icenglou.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"文件保存的一个小细节","slug":"文件保存的一个小细节","date":"2018-05-13T09:09:14.000Z","updated":"2022-05-06T16:55:03.915Z","comments":true,"path":"2018/05/13/文件保存的一个小细节/","link":"","permalink":"http://icenglou.cn/2018/05/13/%E6%96%87%E4%BB%B6%E4%BF%9D%E5%AD%98%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%BB%86%E8%8A%82/","excerpt":"今天我在用flask做上传图片时， 我先将图片读取上传到七牛云，然后再保存在本地，却发现保存在本地图片是空的。 查资料发现，原来当文件对象file_object被read()后，文件指针会指到最后，所以这时再save()，就只能从最后开始读取内容，内容自然为空。","text":"今天我在用flask做上传图片时， 我先将图片读取上传到七牛云，然后再保存在本地，却发现保存在本地图片是空的。 查资料发现，原来当文件对象file_object被read()后，文件指针会指到最后，所以这时再save()，就只能从最后开始读取内容，内容自然为空。 解决办法就是 file.seek(0) 重新将指针指到开头就可以保存了 file object ——&gt; io.buffer ——&gt; read() imagefile = request.files.get(&#x27;upimage&#x27;) #上传的图片md5img = hashlib.md5(imagefile.read()).hexdigest() #图片的md5imagefile.seek(0)imagefile.save(file_path) #保存图片","categories":[],"tags":[{"name":"Python","slug":"python","permalink":"http://icenglou.cn/tags/python/"}]},{"title":"Python命令中的 -m 参数","slug":"Python命令中的-m-参数","date":"2018-04-13T09:03:54.000Z","updated":"2022-05-06T16:54:29.175Z","comments":true,"path":"2018/04/13/Python命令中的-m-参数/","link":"","permalink":"http://icenglou.cn/2018/04/13/Python%E5%91%BD%E4%BB%A4%E4%B8%AD%E7%9A%84-m-%E5%8F%82%E6%95%B0/","excerpt":"首先看一下python –help里的帮助文档 $ python --helpOptions and arguments (and corresponding environment variables):-b : issue warnings about comparing bytearray with unicode (-bb: issue errors)-B : don&#x27;t write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x-c cmd : program passed in as string (terminates option list)-d : debug output from parser; also PYTHONDEBUG=x-E : ignore PYTHON* environment variables (such as PYTHONPATH)-h : print this help message and exit (also --help)-i : inspect interactively after running script; forces a prompt even if stdin does not appear to be a terminal; also PYTHONINSPECT=x-m mod : run library module as a script (terminates option list)-O : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x-OO : remove doc-strings in addition to the -O optimizations-R : use a pseudo-random salt to make hash() values of various types be unpredictable between separate invocations of the interpreter, as a defense against denial-of-service attacks","text":"首先看一下python –help里的帮助文档 $ python --helpOptions and arguments (and corresponding environment variables):-b : issue warnings about comparing bytearray with unicode (-bb: issue errors)-B : don&#x27;t write .py[co] files on import; also PYTHONDONTWRITEBYTECODE=x-c cmd : program passed in as string (terminates option list)-d : debug output from parser; also PYTHONDEBUG=x-E : ignore PYTHON* environment variables (such as PYTHONPATH)-h : print this help message and exit (also --help)-i : inspect interactively after running script; forces a prompt even if stdin does not appear to be a terminal; also PYTHONINSPECT=x-m mod : run library module as a script (terminates option list)-O : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x-OO : remove doc-strings in addition to the -O optimizations-R : use a pseudo-random salt to make hash() values of various types be unpredictable between separate invocations of the interpreter, as a defense against denial-of-service attacks -m mod run library module as a script (terminates option list) “mod“是module的缩写，即“-m“选项后面的内容是 module（模块），其作用是把模块当成脚本来运行。 “terminates option list”意味着“-m”之后的其它选项不起作用，在这点上它跟“-c”是一样的，都是“终极选项”。官方把它们定义为“接口选项”（Interface options），需要区别于其它的普通选项或通用选项。 -m 选项的几个典型用法1、一行命令实现一个简单的HTTP服务 python -m http.server 8000# 注:在 Python2 中是这样python -m SimpleHTTPServer 8000 执行后，在本机打开 “http://localhost:8000”， 或者在局域网内的其它机器上打开 “http://本机ip:8000” ，就能访问到执行目录下的内容。 2、python -m pydoc -p 8000与第一个类似，需要一行命令“python -m pydoc -p 8000”，就能生成 HTML 格式的官方帮助文档，可以在浏览器中访问。 3、python -m pdb xxx.py执行 pdb 的调试命令“python -m pdb xxx.py”，以调试模式来执行“xxx.py”脚本 4、python -m timeit &quot;&#39;-&#39;.join(map(str, range(100)))&quot;测试代码运行时间，多对比一些代码，可以直观的看出代码的效率差异。以此来优化自己的代码。 5、python -m pip install ...可能我们已经习惯用“ pip install … “来安装第三方库， 但是，Python 的核心开发者、第一届指导委员会五人成员之一的 Brett Cannon 专门写了一篇博客《Why you should use “python -m pip”》，提出应该使用“python -m pip”的方式，并做了详细的解释。 他的主要观点是：在存在多个 Python 版本的环境中，这种写法可以精确地控制三方库的安装位置。例如用“python3.8 -m pip”，可以明确指定给 3.8 版本安装，而不会混淆成其它的版本。 6、python -m virtualenv env 创建项目的虚拟环境，前提是已经用“python -m install virtualenv “安装过这个库了。","categories":[],"tags":[{"name":"Python","slug":"python","permalink":"http://icenglou.cn/tags/python/"}]},{"title":"服务器环境搭建","slug":"服务器环境搭建","date":"2018-02-15T02:10:37.000Z","updated":"2022-05-06T16:55:27.081Z","comments":true,"path":"2018/02/15/服务器环境搭建/","link":"","permalink":"http://icenglou.cn/2018/02/15/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","excerpt":"连接服务器ssh root@47.106.85.1**如果报错， Please contact your system administrator.Add correct host key in /Users/xgf/.ssh/known_hosts to get rid of this message.Offending ECDSA key in /Users/xgf/.ssh/known_hosts:4 说明 之前用密钥连过，要删除记录","text":"连接服务器ssh root@47.106.85.1**如果报错， Please contact your system administrator.Add correct host key in /Users/xgf/.ssh/known_hosts to get rid of this message.Offending ECDSA key in /Users/xgf/.ssh/known_hosts:4 说明 之前用密钥连过，要删除记录 cd ~ &amp;&amp; vim .ssh/known_hosts #删除对应IP的 新建系统用户adduser username同时设置密码把用户 username 添加到 /etc/sudoers #给sudoers添加&quot;写&quot;的权限 chmod +w /etc/sudoers vim /etc/sudoers #修改前： # User privilege specification root ALL=(ALL:ALL) ALL #修改后： # User privilege specification root ALL=(ALL:ALL) ALL username ALL=(ALL:ALL) ALL 切换到用户 su username 新建密钥mkdir -m 700 .ssh cd .ssh把本机生成的公钥（id_rsa.pub）复制到 authorized_keys vim authorized_keys chmod 600 authorized_keys 本机生成密钥对：ssh-keygen -t rsa 配置configvim config ： Host name # 快捷连接时的别名 HostName 47.106.85.122 # 服务器外网IP Port 22 # 端口号 User username # 服务器用户名 现在远程连接服务器就可以不用输密码了: ssh name 安装Python3.7安装依赖包sudo apt-get updatesudo apt-get upgradesudo apt-get dist-upgradesudo apt-get install build-essential python-dev python-setuptools python-pip python-smbussudo apt-get install build-essential libncursesw5-dev libgdbm-dev libc6-devsudo apt-get install zlib1g-dev libsqlite3-dev tk-devsudo apt-get install libssl-dev opensslsudo apt-get install libffi-dev 下载安装包# 下载到指定位置 cd /home/download sudo wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz sudo tar xzf Python-3.7.0.tgz 一般下载会比较慢，建议本地下载好，再上传上去scp Python-3.7.3.tgz username@47.106.85.1**:/home/username/downloads 新建一个安装路径 sudo mkdir -p /usr/local/python3 编译安装新建一个安装路径 sudo mkdir -p /usr/local/python3 cd Python-3.7.0 sudo ./configure --prefix=/usr/local/python3 --enable-optimizations sudo make sudo make install 建立软连接如果pip3 install有问题， sudo mv /usr/bin/lsb_release /usr/bin/lsb_release_back 安装supervisorsudo apt-get install python-setuptoolseasy_install supervisorsupervisor -v4.0.1mkdir /home/xgf/etc/supervisor# 配置echo_supervisord_conf &gt; /etc/supervisord.confvim /etc/supervisord.conf# 最后两行注释去了[include]files = /home/xgf/etc/supervisor/*.conf # 前面建的目录里放配置文件 启用crontab 做定时任务crontab -l # 查看 若报错 no crontab for xxx ，就是还没启用 crontab -e # 编辑 一般还要选择编辑器： crontab -e # 编辑一般还要选择编辑器：Select an editor. To change later, run &#x27;select-editor&#x27;. 1. /bin/nano &lt;---- easiest 2. /usr/bin/vim.basic 3. /usr/bin/vim.tiny 4. /bin/edChoose 1-4 [1]: 2这里选 2 vim.basicesc &gt; : &gt; wq #退出 这样crontab就可以正常用了 , 使用教程：https://blog.csdn.net/HRG520JN/article/details/81119156 0 1 * * * cd ~/python_projects/os_speaker &amp;&amp; env/bin/python command.py hotel_list &gt;&gt; ~/python_projects/os_speaker/log/hotel_list.log 2&gt;&amp;15 1 * * * cd ~/python_projects/os_speaker &amp;&amp; env/bin/python command.py room_list &gt;&gt; ~/python_projects/os_speaker/log/room_list.log 2&gt;&amp;1 安装mysqlsudo apt-get install -y mysql-server# 初始化配置sudo mysql_secure_installation选择时： n n y n y y# 检查mysql服务状态systemctl status mysql.service 安装redissudo apt-get install -y redis 如果报错 参考： https://blog.csdn.net/i_chenjiahui/article/details/89435093 { sudo vim /etc/sysctl.conf #net.ipv6.conf.all.disable_ipv6 = 1 #注释这条。net.ipv6.conf.eth0.disable_ipv6 = 1net.ipv6.conf.lo.disable_ipv6 = 1 # 使修改生效 sudo sysctl -p } …………. 设置密码（非必须）sudo vi /etc/redis/redis.confrequirepass 123456# 开启远程访问#注释bind#bind 127.0.0.1# 服务控制sudo systemctl start redis #启动sudo systemctl stop redis #关闭sudo systemctl restart redis #重启# 测试连接:~$ redis-cli127.0.0.1:6379&gt; pingPONG127.0.0.1:6379&gt; 安装nginxsudo apt-get install -y nginx# 检查是否安装成功nginx -v安装好的文件位置：/usr/sbin/nginx：主程序/etc/nginx：存放配置文件/usr/share/nginx：存放静态文件/var/log/nginx：存放日志 一般情况下，现在用浏览器访问主机名或域名，可以看到： 但是，服务器默认是没有开放80端口的，所以远程访问还是访问不了的。需要去阿里云控制台配置安全组规则，打开80端口。","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://icenglou.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]}],"categories":[],"tags":[{"name":"Mac","slug":"mac","permalink":"http://icenglou.cn/tags/mac/"},{"name":"Python","slug":"python","permalink":"http://icenglou.cn/tags/python/"},{"name":"HTML","slug":"html","permalink":"http://icenglou.cn/tags/html/"},{"name":"服务器","slug":"服务器","permalink":"http://icenglou.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"Ubuntu","slug":"ubuntu","permalink":"http://icenglou.cn/tags/ubuntu/"},{"name":"CDN","slug":"cdn","permalink":"http://icenglou.cn/tags/cdn/"},{"name":"Pillow","slug":"pillow","permalink":"http://icenglou.cn/tags/pillow/"},{"name":"数据库","slug":"数据库","permalink":"http://icenglou.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}